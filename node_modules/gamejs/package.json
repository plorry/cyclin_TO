{
  "name": "gamejs",
  "version": "1.0.0",
  "description": "thin library on top of canvas",
  "keywords": [
    "games",
    "gamedev",
    "web",
    "canvas",
    "game library"
  ],
  "author": {
    "name": "Simon Oberhammer",
    "email": "simon@nekapuzer.at",
    "url": "http://nekapuzer.at"
  },
  "main": "./lib/gamejs",
  "directories": {
    "lib": "lib/"
  },
  "homepage": "http://gamejs.org",
  "bugs": {
    "email": "gamejs@googlegroups.com",
    "url": "http://github.com/oberhamsi/gamejs/issues"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/oberhamsi/gamejs.git"
  },
  "readme": "GameJs\n=======\n\nGameJs is a JavaScript library for writing 2D games or other interactive\ngraphic applications for the HTML Canvas <http://gamejs.org>.\n\nUsage\n=========\n\nDepending on how you got GameJs:\n\n## Option 1: zip release\n\nExtract the zip file and try the examples in the zip file over http://.\n\n## Option 2: Node package registry\n\nAfter you installed gamejs, you can use a bundler like `browserify` \nto run your code on the client. Here's a small example:\n\n    cd ~/my-web-game/\n    npm install gamejs\n    npm install -g browswerify\n    browserify ./main.js --out bundled.js\n\n## Option 3: using the git version\n\nYou will have to build GameJs. Go to the GameJs directory and execute this \nin a unix shell, cygwin or in `git bash`:\n\n    $ ./bin/build.sh\n\nThis should create the `gamejs.min.js` file in the GameJs home directory.\n\nMinimal example\n=================\n\nLoad the `gamejs.min.js` file tell the module loader where your\n\"main\" module lies (usually \"./javascript/main.js\"):\n\n    <script src=\"./public/gamejs.min.js\"></script>\n    <script>\n        require.setModuleRoot('./javascript/');\n        require.run('main')\n    </script>\n\n\nAnd inside \"./javascript/main.js\", you can `require` gamejs\nand start your game:\n\n    var gamejs = require('gamejs');\n    gamejs.ready(function() {\n       var display = gamejs.display.setMode([600, 400]);\n       display.blit(myImage);\n       ....\n    });\n\nMore Help\n===========\n\nSee the [GameJs Website](http://gamejs.org) for more help or drop us\nan email in the [Mailing List](http://groups.google.com/group/gamejs).\n\nCheck the `docs` folder of your GameJs installation.\n\nExample application can be found in the `examples/` directory.\n\nBundle your application for production\n==========================================================\n\nA bundled game:\n\n  * does not need to be served over http:// (unless it uses `SurfaceArray`)\n  * has a smaller file size\n  * has somewhat obfuscated code\n\nTo bundle all JavaScript files into one single file, use:\n\n    $./bin/minify-app.sh ./path-to-your-app/javascript/\n\nYou can also add a second argument `compress`. With `compress`, the resulting\nbundle file will be compressed for smaller file size as well as obfuscated.\n\n`minify-app.sh` will create the bundled file `app.min.js` in your app's\n`javascript` folder.\n\nWith browserify\n----------------\n\nIf you already have nodejs installed, this might be convinient:\n\n   npm install -g browserify\n   npm install gamejs\n\n\nGameJs Contribution\n===================\n\nDon't forget to `./bin/build.sh` when modifying the source.\n\nAll applications use a bundled JavaScript file which contains all the \nGameJs source files; thus if you modify the files below `./lib` your \nchanges won't show up in the examples unless you re-build the source files \nwith the `./bin/build.sh` command.\n\nUnit Tests\n--------------\n\nWe use QUnit <https://github.com/jquery/qunit> for the GameJs unit tests. Execute\nthe tests by opening `tests/index.html`.\n\nJsDoc\n----------\nFor the JavaScript documentation system, RingoJs must be installed on your system.\n\n    $ ./bin/create-jsdoc.sh\n\n",
  "readmeFilename": "README.md",
  "_id": "gamejs@1.0.0",
  "_from": "gamejs@~1.0.0"
}
